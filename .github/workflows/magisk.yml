name: Build and Upload WSA

on:
  workflow_dispatch:
    inputs:
      gapps_variant:
        description: 'GApps Variant'
        required: false
        default: 'none'
      root_sol:
        description: 'Root Solution'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Your existing steps...

      - name: Umount images
        run: |
          sudo umount system/vendor || true
          sudo umount system/product || true
          sudo umount system/system_ext || true
          sudo umount system || true
          sudo umount userdata || true
          qemu-img convert -o subformat=dynamic -f raw -O vhdx userdata.img ${{ matrix.arch }}/userdata.vhdx

      - name: Shrink images
        run: |
          e2fsck -yf ${{ matrix.arch }}/system.img
          resize2fs -M ${{ matrix.arch }}/system.img
          e2fsck -yf ${{ matrix.arch }}/vendor.img
          resize2fs -M ${{ matrix.arch }}/vendor.img
          e2fsck -yf ${{ matrix.arch }}/product.img
          resize2fs -M ${{ matrix.arch }}/product.img
          e2fsck -yf ${{ matrix.arch }}/system_ext.img
          resize2fs -M ${{ matrix.arch }}/system_ext.img

      - name: Remove signature and add scripts
        run: |
          rm -rf ${{ matrix.arch }}/\[Content_Types\].xml ${{ matrix.arch }}/AppxBlockMap.xml ${{ matrix.arch }}/AppxSignature.p7x ${{ matrix.arch }}/AppxMetadata
          cp vclibs.appx xaml.appx ${{ matrix.arch }}
          tee ${{ matrix.arch }}/Install.ps1 <<EOF
          # Automated Install script by Mioki
          # http://github.com/okibcn
          function Test-Administrator {
            [OutputType([bool])]
            param()
            process {
              [Security.Principal.WindowsPrincipal]\$user = [Security.Principal.WindowsIdentity]::GetCurrent();
              return \$user.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator);
            }
          }
          function Finish {
            Clear-Host
            Start-Process "wsa://com.topjohnwu.magisk"
            Start-Process "wsa://com.android.vending"
          }
          if (-not (Test-Administrator)) {
            \$proc = Start-Process -PassThru -WindowStyle Hidden -Verb RunAs powershell.exe -Args "-executionpolicy bypass -command Set-Location \`"\$PSScriptRoot\`"; \`"\$PSCommandPath\`" EVAL"
            \$proc.WaitForExit()
            if (\$proc.ExitCode -ne 0) {
              Clear-Host
              Write-Warning "Failed to launch start as Administrator\`r\`nPress any key to exit"
              \$null = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
            }
            exit
          } elseif ((\$args.Count -eq 1) -and (\$args[0] -eq "EVAL")) {
            Start-Process powershell.exe -Args "-executionpolicy bypass -command Set-Location \`"\$PSScriptRoot\`"; \`"\$PSCommandPath\`""
            exit
          }
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"
          \$VMP = Get-WindowsOptionalFeature -Online -FeatureName 'VirtualMachinePlatform'
          if (\$VMP.State -ne "Enabled") {
            Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName 'VirtualMachinePlatform'
            Clear-Host
            Write-Warning "Need restart to enable virtual machine platform\`r\`nPress y to restart or press any key to exit"
            \$key = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
            If ("y" -eq \$key.Character) {
              Restart-Computer -Confirm
            } Else {
              exit 1
            }
          }
          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Path vclibs.appx
          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Path xaml.appx
          \$Installed = Get-AppxPackage -Name 'MicrosoftCorporationII.WindowsSubsystemForAndroid'
          If ((\$null -ne \$Installed) -and (-not (\$Installed.IsDevelopmentMode))) {
            Clear-Host
            Write-Warning "There is already one installed WSA. Please uninstall it first.\`r\`nPress y to uninstall existing WSA or press any key to exit"
            \$key = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
            If ("y" -eq \$key.Character) {
              Remove-AppxPackage -Package \$Installed.PackageFullName
            } Else {
              exit 1
            }
          }
          Clear-Host
          Write-Host "Installing MagiskOnWSA..."
          Stop-Process -Name "wsaclient"
          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Register .\AppxManifest.xml
          if (\$?) {
            Finish
          } Elseif (\$null -ne \$Installed) {
            Clear-Host
            Write-Host "Failed to update, try to uninstall existing installation while preserving userdata..."
            Remove-AppxPackage -PreserveApplicationData -Package \$Installed.PackageFullName
            Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Register .\AppxManifest.xml
            if (\$?) {
              Finish
            }
          }
          Write-Host "All Done\`r\`nPress any key to exit"
          \$null = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
          EOF

      - name: Generate artifact name
        run: |
          variant="${{ github.event.inputs.gapps_variant || 'none' }}"
          root="${{ github.event.inputs.root_sol || '' }}"
          if [[ "$root" = "none" ]]; then
            name1=""
          elif [[ "$root" = "" ]]; then
            name1="-with-magisk"
          else
            name1="-with-${root}"
          fi
          if [[ "$variant" = "none" || "$variant" = "" ]]; then
            name2="-NoGApps"
          else
            name2="-GApps-${variant}"
          fi
          echo "artifact_name=WSA${name1}${name2}_${{ env.WSA_VER }}_${{ matrix.arch }}_${{ env.WSA_REL }}" >> $GITHUB_ENV

      - name: Upload WSA
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: "./${{ matrix.arch }}/*"
